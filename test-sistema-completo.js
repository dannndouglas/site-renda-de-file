const axios = require('axios');

const STRAPI_URL = 'http://localhost:1337';
const FRONTEND_URL = 'http://localhost:3000';

async function testSistemaCompleto() {
  console.log('üß™ TESTE COMPLETO DO SISTEMA - Portal da Renda de Fil√©\n');
  console.log('=' .repeat(60));
  
  let totalTests = 0;
  let passedTests = 0;
  
  // Fun√ß√£o auxiliar para teste
  const test = async (name, testFn) => {
    totalTests++;
    try {
      await testFn();
      console.log(`‚úÖ ${name}`);
      passedTests++;
    } catch (error) {
      console.log(`‚ùå ${name} - ${error.message}`);
    }
  };
  
  console.log('1. TESTANDO INFRAESTRUTURA\n');
  
  await test('Strapi est√° rodando', async () => {
    const response = await axios.get(`${STRAPI_URL}/admin/init`);
    if (response.status !== 200) throw new Error('Strapi n√£o est√° acess√≠vel');
  });
  
  await test('Frontend est√° rodando', async () => {
    const response = await axios.get(FRONTEND_URL);
    if (response.status !== 200) throw new Error('Frontend n√£o est√° acess√≠vel');
  });
  
  console.log('\n2. TESTANDO APIs DO STRAPI\n');
  
  const apis = [
    { name: 'Associa√ß√µes', endpoint: '/api/associacaos' },
    { name: 'Produtos', endpoint: '/api/produtos' },
    { name: 'Not√≠cias/Eventos', endpoint: '/api/noticia-eventos' },
    { name: 'P√°gina Sobre', endpoint: '/api/pagina-sobre' }
  ];
  
  for (const api of apis) {
    await test(`API ${api.name}`, async () => {
      const response = await axios.get(`${STRAPI_URL}${api.endpoint}`);
      if (response.status === 403) {
        throw new Error('Sem permiss√£o - configure permiss√µes p√∫blicas');
      }
      if (response.status === 404) {
        throw new Error('Content Type n√£o existe');
      }
      if (response.status !== 200) {
        throw new Error(`Status ${response.status}`);
      }
    });
  }
  
  console.log('\n3. TESTANDO P√ÅGINAS DO FRONTEND\n');
  
  const pages = [
    { name: 'P√°gina Inicial', path: '/' },
    { name: 'Sobre', path: '/sobre' },
    { name: 'Associa√ß√µes', path: '/associacoes' },
    { name: 'Not√≠cias', path: '/noticias' },
    { name: 'Contato', path: '/contato' },
    { name: 'Termos', path: '/termos' },
    { name: 'Privacidade', path: '/privacidade' }
  ];
  
  for (const page of pages) {
    await test(`P√°gina ${page.name}`, async () => {
      const response = await axios.get(`${FRONTEND_URL}${page.path}`);
      if (response.status !== 200) {
        throw new Error(`Status ${response.status}`);
      }
      if (!response.data.includes('Renda de Fil√©')) {
        throw new Error('Conte√∫do n√£o carregou corretamente');
      }
    });
  }
  
  console.log('\n4. TESTANDO INTEGRA√á√ÉO FRONTEND ‚Üî BACKEND\n');
  
  await test('Dados das Associa√ß√µes no Frontend', async () => {
    const response = await axios.get(`${FRONTEND_URL}/associacoes`);
    if (response.status !== 200) throw new Error('P√°gina n√£o carregou');
    
    // Verificar se h√° dados das associa√ß√µes
    const content = response.data;
    const hasAssociacoes = content.includes('Associa√ß√£o') || content.includes('associa√ß√£o');
    if (!hasAssociacoes) {
      throw new Error('Dados das associa√ß√µes n√£o est√£o sendo exibidos');
    }
  });
  
  await test('Dados das Not√≠cias no Frontend', async () => {
    const response = await axios.get(`${FRONTEND_URL}/noticias`);
    if (response.status !== 200) throw new Error('P√°gina n√£o carregou');
    
    const content = response.data;
    const hasNoticias = content.includes('Festival') || content.includes('Exposi√ß√£o');
    if (!hasNoticias) {
      throw new Error('Dados das not√≠cias n√£o est√£o sendo exibidos');
    }
  });
  
  console.log('\n5. TESTANDO FUNCIONALIDADES ESPEC√çFICAS\n');
  
  await test('Google Maps configurado', async () => {
    const response = await axios.get(`${FRONTEND_URL}/associacoes`);
    const content = response.data;
    
    // Verificar se o componente Google Maps est√° presente
    if (!content.includes('GoogleMap') && !content.includes('google')) {
      console.log('‚ö†Ô∏è  Google Maps n√£o configurado (API key necess√°ria)');
    }
  });
  
  await test('Formul√°rio de Contato', async () => {
    const response = await axios.get(`${FRONTEND_URL}/contato`);
    if (response.status !== 200) throw new Error('P√°gina n√£o carregou');
    
    const content = response.data;
    if (!content.includes('form') && !content.includes('formul√°rio')) {
      throw new Error('Formul√°rio n√£o encontrado');
    }
  });
  
  await test('Design Responsivo', async () => {
    const response = await axios.get(FRONTEND_URL);
    const content = response.data;
    
    // Verificar se Tailwind CSS est√° sendo usado
    if (!content.includes('tailwind') && !content.includes('responsive')) {
      console.log('‚ö†Ô∏è  Verificar se Tailwind CSS est√° funcionando');
    }
  });
  
  console.log('\n6. VERIFICANDO DADOS POPULADOS\n');
  
  try {
    const associacoesResponse = await axios.get(`${STRAPI_URL}/api/associacaos`);
    const associacoes = associacoesResponse.data.data || [];
    console.log(`üìä Associa√ß√µes cadastradas: ${associacoes.length}`);
    
    if (associacoes.length > 0) {
      console.log('   Associa√ß√µes encontradas:');
      associacoes.forEach((assoc, index) => {
        console.log(`   ${index + 1}. ${assoc.attributes?.nome || 'Nome n√£o definido'}`);
      });
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar associa√ß√µes');
  }
  
  try {
    const produtosResponse = await axios.get(`${STRAPI_URL}/api/produtos`);
    const produtos = produtosResponse.data.data || [];
    console.log(`üìä Produtos cadastrados: ${produtos.length}`);
  } catch (error) {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar produtos');
  }
  
  try {
    const noticiasResponse = await axios.get(`${STRAPI_URL}/api/noticia-eventos`);
    const noticias = noticiasResponse.data.data || [];
    console.log(`üìä Not√≠cias/Eventos cadastrados: ${noticias.length}`);
  } catch (error) {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar not√≠cias');
  }
  
  console.log('\n' + '=' .repeat(60));
  console.log(`üìä RESULTADO DOS TESTES: ${passedTests}/${totalTests} passaram`);
  
  if (passedTests === totalTests) {
    console.log('üéâ TODOS OS TESTES PASSARAM! Sistema funcionando perfeitamente!');
  } else {
    console.log('‚ö†Ô∏è  Alguns testes falharam. Verifique as configura√ß√µes.');
  }
  
  console.log('\nüìã CHECKLIST FINAL:');
  console.log('‚ñ° Content Types criados no Strapi');
  console.log('‚ñ° Permiss√µes p√∫blicas configuradas');
  console.log('‚ñ° Conte√∫do populado');
  console.log('‚ñ° Google Maps API configurada (opcional)');
  console.log('‚ñ° Todas as p√°ginas funcionando');
  
  console.log('\nüöÄ Para finalizar:');
  console.log('1. Acesse http://localhost:1337/admin para configurar permiss√µes');
  console.log('2. Execute: node populate-content.js (ap√≥s criar Content Types)');
  console.log('3. Teste o site em http://localhost:3000');
  
  return { totalTests, passedTests };
}

testSistemaCompleto().catch(console.error);
